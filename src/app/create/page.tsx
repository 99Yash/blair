'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import * as z from 'zod/v4';

import { Loader2, Plus, X } from 'lucide-react';
import { Button } from '~/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '~/components/ui/card';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '~/components/ui/form';
import { Input } from '~/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '~/components/ui/select';
import { Slider } from '~/components/ui/slider';

// Form schema that matches the API expectations but makes AI-inferable fields optional
const createPostFormSchema = z.object({
  original_url: z.string().url('Must be a valid URL').min(1, 'URL is required'),
  platform: z.enum(['twitter', 'instagram', 'facebook', 'linkedin'], {
    message: 'Please select a platform',
  }),
  link_ownership_type: z.enum(['own_content', 'third_party_content'], {
    message: 'Please select ownership type',
  }),
  // These are required by the original schema but will be provided by AI if not specified
  content_type: z
    .enum([
      'self_help',
      'tech_tutorial',
      'news_article',
      'product_review',
      'thought_leadership',
      'entertainment',
      'other',
    ])
    .optional(),
  target_audience: z
    .enum([
      'developers',
      'marketers',
      'entrepreneurs',
      'students',
      'parents',
      'general_public',
      'creatives',
      'finance_professionals',
      'other',
    ])
    .optional(),
  tone_profile: z
    .array(
      z.object({
        tone: z.enum([
          'witty',
          'professional',
          'inspirational',
          'casual',
          'direct',
          'empathetic',
        ]),
        weight: z.number().min(0).max(100),
      })
    )
    .optional(),
  call_to_action_type: z
    .enum([
      'learn_more',
      'sign_up',
      'buy_now',
      'read_article',
      'watch_video',
      'download',
      'join_community',
      'poll_question',
      'other',
    ])
    .optional(),
  sales_pitch_strength: z.number().min(0).max(100).optional(),
  // Add placeholder values for fields that will be generated by AI
  post_content: z.string().optional(),
  content_summary: z.string().optional(),
});

type CreatePostFormData = z.infer<typeof createPostFormSchema>;

const toneOptions = [
  { value: 'witty', label: 'Witty' },
  { value: 'professional', label: 'Professional' },
  { value: 'inspirational', label: 'Inspirational' },
  { value: 'casual', label: 'Casual' },
  { value: 'direct', label: 'Direct' },
  { value: 'empathetic', label: 'Empathetic' },
];

const ctaOptions = [
  { value: 'learn_more', label: 'Learn More' },
  { value: 'sign_up', label: 'Sign Up' },
  { value: 'buy_now', label: 'Buy Now' },
  { value: 'read_article', label: 'Read Article' },
  { value: 'watch_video', label: 'Watch Video' },
  { value: 'download', label: 'Download' },
  { value: 'join_community', label: 'Join Community' },
  { value: 'poll_question', label: 'Poll Question' },
  { value: 'other', label: 'Other' },
];

export default function CreatePage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [generatedPost, setGeneratedPost] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const form = useForm<CreatePostFormData>({
    resolver: zodResolver(createPostFormSchema),
    defaultValues: {
      original_url: '',
      platform: undefined,
      link_ownership_type: undefined,
      content_type: undefined,
      target_audience: undefined,
      tone_profile: [],
      call_to_action_type: undefined,
      sales_pitch_strength: 5,
    },
  });

  const addToneProfile = () => {
    const currentTones = form.getValues('tone_profile') || [];
    form.setValue('tone_profile', [
      ...currentTones,
      { tone: 'casual', weight: 50 },
    ]);
  };

  const removeToneProfile = (index: number) => {
    const currentTones = form.getValues('tone_profile') || [];
    form.setValue(
      'tone_profile',
      currentTones.filter((_, i) => i !== index)
    );
  };

  const updateToneProfile = (
    index: number,
    field: 'tone' | 'weight',
    value: string | number
  ) => {
    const currentTones = form.getValues('tone_profile') || [];
    const updatedTones = [...currentTones];
    updatedTones[index] = { ...updatedTones[index], [field]: value };
    form.setValue('tone_profile', updatedTones);
  };

  const onSubmit = async (data: CreatePostFormData) => {
    setIsSubmitting(true);
    setError(null);
    setGeneratedPost(null);

    try {
      // Ensure we have at least one tone profile since the API expects it
      const submissionData = {
        ...data,
        tone_profile:
          data.tone_profile && data.tone_profile.length > 0
            ? data.tone_profile
            : [{ tone: 'casual', weight: 50 }], // Default tone if none specified
      };

      const response = await fetch('/api/posts/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submissionData),
      });

      const result = await response.json();

      if (!response.ok) {
        setError(result.message || 'Failed to generate post');
        return;
      }

      setGeneratedPost(result.generatedPostText);
    } catch {
      setError('Failed to generate post. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-4xl mx-auto py-8 px-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Create Social Media Post</h1>
        <p className="text-muted-foreground">
          Generate engaging social media content from any URL using AI
        </p>
      </div>

      <div className="grid gap-8 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Post Details</CardTitle>
            <CardDescription>
              Provide the basic information for your social media post
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="space-y-6"
              >
                <FormField
                  control={form.control}
                  name="original_url"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>URL *</FormLabel>
                      <FormControl>
                        <Input
                          placeholder="https://example.com/article"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription>
                        The URL you want to create a social media post about
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="platform"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Platform *</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select platform" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="twitter">Twitter</SelectItem>
                          <SelectItem value="instagram">Instagram</SelectItem>
                          <SelectItem value="facebook">Facebook</SelectItem>
                          <SelectItem value="linkedin">LinkedIn</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="link_ownership_type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Content Ownership *</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select ownership type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="own_content">
                            My Own Content
                          </SelectItem>
                          <SelectItem value="third_party_content">
                            Third Party Content
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="content_type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Content Type (Optional)</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select content type" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="self_help">Self Help</SelectItem>
                          <SelectItem value="tech_tutorial">
                            Tech Tutorial
                          </SelectItem>
                          <SelectItem value="news_article">
                            News Article
                          </SelectItem>
                          <SelectItem value="product_review">
                            Product Review
                          </SelectItem>
                          <SelectItem value="thought_leadership">
                            Thought Leadership
                          </SelectItem>
                          <SelectItem value="entertainment">
                            Entertainment
                          </SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Leave blank for AI to infer from content
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="target_audience"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Target Audience (Optional)</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select target audience" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="developers">Developers</SelectItem>
                          <SelectItem value="marketers">Marketers</SelectItem>
                          <SelectItem value="entrepreneurs">
                            Entrepreneurs
                          </SelectItem>
                          <SelectItem value="students">Students</SelectItem>
                          <SelectItem value="parents">Parents</SelectItem>
                          <SelectItem value="general_public">
                            General Public
                          </SelectItem>
                          <SelectItem value="creatives">Creatives</SelectItem>
                          <SelectItem value="finance_professionals">
                            Finance Professionals
                          </SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Leave blank for AI to infer from content
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <FormLabel>Tone Profile (Optional)</FormLabel>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={addToneProfile}
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Add Tone
                    </Button>
                  </div>

                  {form.watch('tone_profile')?.map((toneProfile, index) => (
                    <div
                      key={index}
                      className="flex items-center gap-4 p-4 border rounded-lg"
                    >
                      <Select
                        value={toneProfile.tone}
                        onValueChange={(value) =>
                          updateToneProfile(index, 'tone', value)
                        }
                      >
                        <SelectTrigger className="w-40">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {toneOptions.map((option) => (
                            <SelectItem key={option.value} value={option.value}>
                              {option.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>

                      <div className="flex-1">
                        <FormLabel className="text-sm">
                          Weight: {toneProfile.weight}%
                        </FormLabel>
                        <Slider
                          value={[toneProfile.weight]}
                          onValueChange={([value]) =>
                            updateToneProfile(index, 'weight', value)
                          }
                          max={100}
                          step={5}
                          className="mt-1"
                        />
                      </div>

                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeToneProfile(index)}
                      >
                        <X className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}

                  <FormDescription>
                    Leave blank for AI to infer from content
                  </FormDescription>
                </div>

                <FormField
                  control={form.control}
                  name="call_to_action_type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Call to Action (Optional)</FormLabel>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select call to action" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          {ctaOptions.map((option) => (
                            <SelectItem key={option.value} value={option.value}>
                              {option.label}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        Leave blank for AI to infer from content
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="sales_pitch_strength"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Sales Pitch Strength (Optional)</FormLabel>
                      <FormControl>
                        <div className="space-y-2">
                          <Slider
                            value={[field.value || 5]}
                            onValueChange={([value]) => field.onChange(value)}
                            max={10}
                            min={1}
                            step={1}
                          />
                          <div className="flex justify-between text-sm text-muted-foreground">
                            <span>Subtle (1)</span>
                            <span className="font-medium">
                              {field.value || 5}/10
                            </span>
                            <span>Aggressive (10)</span>
                          </div>
                        </div>
                      </FormControl>
                      <FormDescription>
                        Leave as default for AI to infer from content
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="w-full"
                >
                  {isSubmitting && (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  )}
                  Generate Post
                </Button>
              </form>
            </Form>
          </CardContent>
        </Card>

        <div className="space-y-6">
          {error && (
            <Card>
              <CardHeader>
                <CardTitle className="text-destructive">Error</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-destructive">{error}</p>
              </CardContent>
            </Card>
          )}

          {generatedPost && (
            <Card>
              <CardHeader>
                <CardTitle>Generated Post</CardTitle>
                <CardDescription>
                  Your AI-generated social media post
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="p-4 bg-muted rounded-lg">
                  <p className="whitespace-pre-wrap">{generatedPost}</p>
                </div>
                <div className="mt-4 flex gap-2">
                  <Button variant="outline" size="sm">
                    Copy to Clipboard
                  </Button>
                  <Button variant="outline" size="sm">
                    Edit Post
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
}
